
#PHP

*substr
$rest = substr("abcdef", -1);    // retorna "f"
$rest = substr("abcdef", -2);    // retorna "ef"
$rest = substr("abcdef", -3, 1); // retorna "d"
$rest = substr("abcdef", 0, -1);  // retorna "abcde"
$rest = substr("abcdef", 2, -1);  // retorna "cde"
$rest = substr("abcdef", 4, -4);  // retorna ""
$rest = substr("abcdef", -3, -1); // retorna "de"
echo substr('abcdef', 1);     // bcdef
echo substr('abcdef', 1, 3);  // bcd
echo substr('abcdef', 0, 4);  // abcd
echo substr('abcdef', 0, 8);  // abcdef
echo substr('abcdef', -1, 1); // f
// Accessing single characters in a string
// can also be achived using "curly braces"
$string = 'abcdef';
echo $string{0};                 // a
echo $string{3};                 // d
echo $string{strlen($string)-1}; // f
//UTF8
$utf8string = "cakeæøå";
echo substr($utf8string,0,5); // output cake#
echo mb_substr($utf8string,0,5,'UTF-8'); //output cakeæ

*str_replace
// Fornece: <body text='black'>
$bodytag = str_replace("%body%", "black", "<body text='%body%'>");
// Fornece: Hll Wrld f PHP
$vowels = array("a", "e", "i", "o", "u", "A", "E", "I", "O", "U");
$onlyconsonants = str_replace($vowels, "", "Hello World of PHP");
// Fornece: você comeria pizza, cerveja e sorvete todos os dias
$frase  = "você comeria frutas, vegetais, e fibra todos os dias.";
$saudavel = array("frutas", "vegetais", "fibra");
$saboroso   = array("pizza", "cerveja", "sorvete");
$novafrase = str_replace($saudavel, $saboroso, $frase);
// Uso do parâmetro count está disponível no PHP 5.0.0
$str = str_replace("ll", "", "good golly miss molly!", $count);
echo $count; // 2
// Order of replacement
$str     = "Line 1\nLine 2\rLine 3\r\nLine 4\n";
$order   = array("\r\n", "\n", "\r");
$replace = '<br />';
$newstr = str_replace($order, $replace, $str); // Processes \r\n's first so they aren't converted twice.
// Outputs: apearpearle pear
$letters = array('a', 'p');
$fruit   = array('apple', 'pear');
$text    = 'a p';
$output  = str_replace($letters, $fruit, $text);
echo $output;

*strtr
$addr = strtr($addr, "äåö", "aao");
//hello all, I said hi
$trans = array("hello" => "hi", "hi" => "hello");
echo strtr("hi all, I said hello", $trans);

*implode
// lastname,email,phone
$array = array('lastname', 'email', 'phone');
$comma_separated = implode(",", $array);
print $comma_separated; 
// respostas
$a1 = array("1","2","3");
$a2 = array("a");
$a3 = array();   
echo "a1 is: '".implode("','",$a1)."'<br>"; //a1 is: '1','2','3'
echo "a2 is: '".implode("','",$a2)."'<br>"; //a2 is: 'a'
echo "a3 is: '".implode("','",$a3)."'<br>"; //a3 is: ''
//lista com tags html
$elements = array('a', 'b', 'c');
echo "<ul><li>" . implode("</li><li>", $elements) . "</li></ul>";
//SQL
$array = array(
      "name" => "John",
      "surname" => "Doe",
      "email" => "j.doe@intelligence.gov"
   );
$sql = "INSERT INTO table ('".implode("', '", array_keys($array))."') VALUES ('".implode("', '", $array)."')";

*explode
// Example 1
$pizza  = "piece1 piece2 piece3 piece4 piece5 piece6";
$pieces = explode(" ", $pizza);
echo $pieces[0]; // piece1
echo $pieces[1]; // piece2
//limites
$str = 'one|two|three|four';
// positive limit
print_r(explode('|', $str, 2)); // Array([0] => one,[1] => two|three|four)
// negative limit (since PHP 5.1)
print_r(explode('|', $str, -1)); // Array( [0] => one, [1] => two, [2] => three)

*array_map
// EXEMPLO 1
function cube($n){
    return($n * $n * $n);
}
$a = array(1, 2, 3, 4, 5);
$b = array_map("cube", $a);
print_r($b); // Array([0] => 1, [1] => 8, [2] => 27, [3] => 64, [4] => 125)
// EXEMPLO 2
$func = function($value) {
    return $value * 2;
};
print_r(array_map($func, range(1, 5))); // Array([0] => 2, [1] => 4, [2] => 6, [3] => 8, [4] => 10)
// EXEMPLO 3, Array de Arrays
$a = array(1, 2, 3, 4, 5);
$b = array("um", "dois", "tres", "quatro", "cinco");
$c = array("uno", "dos", "tres", "cuatro", "cinco");
$d = array_map(null, $a, $b, $c);
print_r($d);
//Array(
//    [0] => Array( [0] => 1, [1] => one, [2] => uno)
//    [1] => Array( [0] => 2, [1] => two, [2] => dos)
//    [2] => Array([0] => 3, [1] => three, [2] => tres)
//    [3] => Array([0] => 4, [1] => four, [2] => cuatro)
//    [4] => Array([0] => 5, [1] => five, [2] => cinco))
//Chamada de Class
array_map( array('myclass','myMethod') , $value);
//Array de todos os não fumantes
$data = [ ["name" => "John","smoker" => false], ["name" => "Mary","smoker" => true] ];
$names = array_filter(array_map(function($n) { if(!$n['smoker']) return $n['name']; }, $data));

*array_filter
function impar($var){
    return($var & 1); // retorna se o inteiro informado é impar
}
$array1 = array("a" => 1, "b" => 2, "c" => 3, "d" => 4, "e" => 5);
print_r(array_filter($array1, "impar")); // Array([a] => 1, [c] => 3, [e] => 5)

*array_slice
$input = array("a", "b", "c", "d", "e");
$output = array_slice($input, 0, 3);   // retorna "a", "b", e "c"
$output = array_slice($input, 2);      // retorna "c", "d", e "e"
$output = array_slice($input, 2, -1);  // retorna "c", "d"
$output = array_slice($input, -2, 1);  // retorna "d"
print_r(array_slice($input, 2, -1));
print_r(array_slice($input, 2, -1, true)); // preservar keys originais




####################### UTILIDADES #######################


<?php
after ('@', 'biohazard@online.ge');
//returns 'online.ge'
//from the first occurrence of '@'

before ('@', 'biohazard@online.ge');
//returns 'biohazard'
//from the first occurrence of '@'

between ('@', '.', 'biohazard@online.ge');
//returns 'online'
//from the first occurrence of '@'

after_last ('[', 'sin[90]*cos[180]');
//returns '180]'
//from the last occurrence of '['

before_last ('[', 'sin[90]*cos[180]');
//returns 'sin[90]*cos['
//from the last occurrence of '['

between_last ('[', ']', 'sin[90]*cos[180]');
//returns '180'
//from the last occurrence of '['
?>

here comes the source:

<?php

    function after ($this, $inthat)
    {
        if (!is_bool(strpos($inthat, $this)))
        return substr($inthat, strpos($inthat,$this)+strlen($this));
    };

    function after_last ($this, $inthat)
    {
        if (!is_bool(strrevpos($inthat, $this)))
        return substr($inthat, strrevpos($inthat, $this)+strlen($this));
    };

    function before ($this, $inthat)
    {
        return substr($inthat, 0, strpos($inthat, $this));
    };

    function before_last ($this, $inthat)
    {
        return substr($inthat, 0, strrevpos($inthat, $this));
    };

    function between ($this, $that, $inthat)
    {
        return before ($that, after($this, $inthat));
    };

    function between_last ($this, $that, $inthat)
    {
     return after_last($this, before_last($that, $inthat));
    };

// use strrevpos function in case your php version does not include it
function strrevpos($instr, $needle)
{
    $rev_pos = strpos (strrev($instr), strrev($needle));
    if ($rev_pos===false) return false;
    else return strlen($instr) - $rev_pos - strlen($needle);
};
?>





